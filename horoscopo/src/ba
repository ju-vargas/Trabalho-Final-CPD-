

        Node testante, testante2, testante3; 
        testante = readInArq(r);
        testante2 = readInArq(np3); 
        testante3 = readInArq(x); 
        //==============================================================================
        cout << "node p1:" << endl;
        testante.keys[0].word.wPrint();
        cout << endl;
        testante.keys[1].word.wPrint();
        cout << endl;
        testante.keys[2].word.wPrint();
        cout << endl;
        testante.keys[3].word.wPrint();
        cout << endl;
        testante.keys[4].word.wPrint();
        cout << endl;
        testante.keys[5].word.wPrint();
        cout << endl << endl;
        //============================================================================== 

        //==============================================================================
        cout << "node x:" << endl;
        testante3.keys[0].word.wPrint();
        cout << endl;
        testante3.keys[1].word.wPrint();
        cout << endl;
        testante3.keys[2].word.wPrint();
        cout << endl;
        testante3.keys[3].word.wPrint();
        cout << endl;
        testante3.keys[4].word.wPrint();
        cout << endl;
        testante3.keys[5].word.wPrint();
        cout << endl << endl;
        //============================================================================== 

        //==============================================================================
        cout << "node p3:" << endl;
        testante2.keys[0].word.wPrint();
        cout << endl;
        testante2.keys[1].word.wPrint();
        cout << endl;
        testante2.keys[2].word.wPrint();
        cout << endl;
        testante2.keys[3].word.wPrint();
        cout << endl;
        testante2.keys[4].word.wPrint();
        cout << endl;
        testante2.keys[5].word.wPrint();
        cout << endl << endl;
        //============================================================================== 
    




    
    streampos 

    while(dic_binarya.read((char*)&wordAux.ID, sizeof(int))){
        getline(dic_binarya, wordAux.palavra, '\0');
        getline(dic_binarya, wordAux.classe, '\0');
        getline(dic_binarya, wordAux.genero, '\0');
        getline(dic_binarya, wordAux.numero, '\0');
        getline(dic_binarya, wordAux.significado, '\0');  
        dic_binarya.read((char*)&wordAux.deleted, sizeof(bool)); 

        //TESTE AAA
        int endChato; 
        endLegal = dic_binarya.tellg();
        endChato = endLegal; 
        endChato = endChato - sizeof(wordAux.palavra);
        endChato = endChato - sizeof(wordAux.classe);
        endChato = endChato - sizeof(wordAux.genero);
        endChato = endChato - sizeof(wordAux.numero);
        endChato = endChato - sizeof(wordAux.palavra);
        endChato = endChato - sizeof(wordAux.significado);
        endChato = endChato - sizeof(int);
        endChato = endChato - sizeof(bool);
        //endChato = endChato - sizeof(wordAux);
        endLegal = endChato; 
        

        if (classe == wordAux.classe) {
            auxEntry.entryWord.clear();
            auxEntry.entryWord.fromString(wordAux.palavra);
            //cout << "escrevi: "; 
            //auxEntry.entryWord.wPrint(); 
            auxEntry.ID = wordAux.ID; 
            
            auxEntry.pos = endLegal;

            inverted.write((char*)&auxEntry, sizeof(Entry));
            numEntrysWrite++; 
        }
    }




       //string arq_data_is = argv[1];
   //string arq_binary_is = argv[2];
   //fillFile(arq_data_is, arq_binary_is);
      get<0>(tam) = generateInverted("adj.", "../invertidos/adjetivos.bin");
   get<1>(tam) = generateInverted("s.", "../invertidos/substantivos.bin");
   get<2>(tam) = generateInvertedVerb("../invertidos/verbos.bin");
   get<3>(tam) = generateInverted("prep.", "../invertidos/preposicoes.bin");
   //readInverted("../invertidos/adjetivos.bin"); 
   //readFile(arq_binary_is); 

    

//precisa as vezes

  get<0>(tam) = generateInverted("adj.", "../invertidos/adjetivos.bin");
  get<1>(tam) = generateInverted("s.", "../invertidos/substantivos.bin");
  get<2>(tam) = generateInvertedVerb("../invertidos/verbos.bin");
  get<3>(tam) = generateInverted("prep.", "../invertidos/preposicoes.bin");
  //readInverted("../invertidos/adjetivos.bin"); 
  //readFile(arq_binary_is); 

  saveInt(get<0>(tam), get<1>(tam), get<2>(tam), get<3>(tam));